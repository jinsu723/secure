day52

리눅스 개면 -> vm ware 설치 -> 록키리눅스 설치

1. 컴퓨터(Computer)와 운영체제(OS, Operating System)
	1) 컴퓨터 : 아주 빠른 계산기
		데이터를 처리하고 계산을 수행할 수 있는 전자장치
		하드웨어와 소트프웨어로 구성

		- 컴퓨터의 주요 구성 요소
			cpu(Central Processing Unit) : 컴퓨터의 두뇌 역할
			RAM(Ranndom Access Memory) : 데이터를 임시로 저장하는 메모리
			저장장치 : 하드라이브(HDD), 솔리드 스테이트 드라이브(SSD), 데이터를 영구적으로 저장
			입출력 장치(I/O device) : 마우스, 키보드, 모니터와 같은 장치들이 컴퓨터와 사용자간의 상호작용을 가능하게 함

	2) 운영체제 : 컴퓨터 하드웨어와 사옹자 프로그램 사이에서 중재자 역할을 하는 소프트웨어
		자원 관리(cpu, ram, 저장장치 등) 및 프로그램 실행을 지원, 보안, 인터페이스 제공 등의 약할을 함

		- 운영체제의 주요 역할
			자원 관리 : cpu 관리, 메모리 관리, 파일시스템 관리

			프로세스 관리 : 실행중인 프로그램을 프로세스로 다루며 여러 개의 프로그램이 동시에 실행될 수 있도록 함
				멀티테스킹을 지원해서 여러 프로그램이 동시에 실행될 수 있도록 함

			보안 : 사용자 인증 및 권환 부여를 토앻 시스템에 대한 접근을 제어하고 시스템의 무단접근을 방지

			인터페이스 제공 : 사용자와 컴퓨터 하드웨어 간의 상호작용을 위한 인터페이스를 제공함
				그래픽 사옹자 인터페이스(GUI), 명령어 인터페이스(CLI)

		- 운영체제의 종류
			windows
			macOS
			Linux : 오픈소스 운영체제, 다양한 베포판
			UNIX : 고전적인 운영체제, 서버와 대형 컴퓨터에서 사옹됨

	3) 컴퓨터와 운영체제의 관계
		하드웨어는 운영체제와 상호작용하면서 프로그램이 실행될 수 있도록 자원을 제공하며
		운영체제는 하드웨어를 관리하면서 효율적이고 안정적인 작업 수행을 도움
		운영체제는 사용자와 하드웨어간의 중재자 역할을 하며, 하드웨어 자원을 관리하고 프로그램이 제대로 실행될 수 있도록 시스템을 제어함

2. 가상머신(VM, Virtual Machine)
		호스트 컴퓨터의 자원(CPU, 메모리, 저장공간 등)을 소프트웨어적으로 나누어 여러 개의 가상 컴퓨터처럼 사용할 수 있게 해주는 기술
		가상화 된 시스템은 물리적인 컴퓨터처럼 독립적인 운영체제와 어플리케이션을 실행할 수 있다

	1) 가상 머신의 주요 특징
		- 독립성 : 독립적으로 운영체제와 어플리케이션을 실행
		- 하드웨어 가상화 : 호스트 시스템에 하드웨어 자원을 나누어 사용하며, 각 가상머신들은 자신만의 cpu, 메모리, 저장장치를 가상화 된 형태로 할당받는다
			물리적 하드웨어에서 제공하는 자원처럼 작동한다
		- 자원 효율성 : 물리적 컴퓨터 하나로 여러 가상머신을 실행할 수 있기 때문에 자원을 효율적으로 사용 가능하다
		- 격리성 : 호스트 시스템과 격리된 환경에서 실행됨

	2) 가상화 소프트웨어(Virualization Software)
		- VMware Workstation Pro
			데스트탑 가상화 소프트웨어

		- Oracle VirtualBox
			무료 오픈소스 가상화 소프트웨어

		- Microsoft Hyper-V
			Hyper-v는 윈도우 서버 및 Window 10 Pro 이상에서 사용할 수 있는 가상화 소프트웨어

		- KVM(Kerbel-based Virtual Machine)
			리눅스에서 사용할 수 있는 오픈소스 가상화 솔루션
			리눅스 커널내에서 가상화 기능을 제공

		- Xen
			오픈소스 가상화 플랫폼, 서법가상화에 주로 사용됨

	3) 가상화 소프트웨어의 주요 기능
		- 스냅샷(Snapshot)
			가상머신의 현제 상태를 저장하는 기능
			나중에 스냅샷을 복원하여 이전 상태로 돌아갈 수 있다
			테스트 중인 시스템을 롤백할 때 유용하게 사용한다

		- 클로닝(Cloning)
			가상머신을 복제하는 기능
			기존 가상머신의 설정과 데이터등을 그대로 복제하여 새로운 가상머신을 생성할 수 있다

		- 가상 네트워크(Virtual Networking)
			가상머신 간의 네트워크 연결을 설정할 수 있는 기능
			여러 가상머신이 서로 통신하거나 외부 네트워크와 연결될 수 있다
			가상 LAN, NAT, 브리지 모드 등을 설정할 수 있어 다양한 네트워크 환경 시뮬레이션 할 수 있다

		- 성능 최적화
			가상머신에 할당된 CPU, 메모리, 저장소 자원을 최적화 하여 여러 가상머신이 효율적으로 자원을 공유할 수 있게 한다

		- 호스트 시스템과의 파일 공유
			가상머신과 호스트 시스템간의 파일 공유를 설정하여 데이터를 쉽게 전송하고 관리할 수 있다

3. 오픈소스 라이선스
	소프트웨어의 사용, 수정, 베포 등에 대한 조건을 정의하는 법적 문서
	오픈소스 소프트웨어는 소스코드가 공개되어 있고 누구나 사용하고 수정이 가능하지만 이를 위한 규칙이 있다

	- BSD 라이선스
		제한 없이 자유롭게 사용할 수 있는 라이선스
		코드 수정이나 재배포 시 소스코드를 공개할 의무가 없고 상업적인 용도로도 자유롭게 사용할 수 있다

	- GPL(General Public License)
		자유소프트웨어 정책에 따른 라이선스
		상업적 사용 시 모든 소스크도를 공개해야 하는 조건이 있다
		즉, 코드를 수정하거나 배포할 경우 수정된 소스코드도 공개하여야 하며 이를 통해 자유로운 사용과 개선을 장려한다
		* 주요 특징 : 모든 배포된 소프트웨어는 원본 소스코드와 동일한 라이선스를 따라야 한다

	- LGPL(Lesser GPL)
		모듈이나 라이브러리에만 적용된다
		상업적인 사용 시 소스코드를 공개할 필요가 없으며 라이브러리를 사용하는 어플리케이션의 소스코드를 공개할 필요는 없다
		* 주요 특징 : 라이브러리만 GPL 조건을 따른다

	- MIT 라이선스
		가장 간단한 오픈소스 라이선스 중 하나로 사용자가 소스코드를 자유롭게 사용, 수정, 배포할 수 있다
		저작권과 라이선스 정보만 표기하면 자유롭게 사용할 수 있기 때문에 유연한 라이선스이다

4. GNU(GUN Not UNIX)
	자유 소프트웨어 재단의 소프트웨어 개발 프로젝트
	유닉스와 비슷하지만 자유롭게 사용할 수 있는 운영체제를 목표로 한다
	* 모든 사람들이 자우롭게 사용할 수 있는 소프트웨어를 제공하는 것이다
	리차드 스톨만 : GNU 프로젝트의 창립자
	GPL : 자유 소프트웨어 정잭으로 사용자는 소프트웨어를 자유롭게 사용할 수 있고 수정하여 재배포할 수 있다
		단, 수정한 코드를 배포할 때는 소스코드를 공개해야 한다

5. 리눅스 프로젝트
	리눅스 토르발즈 개발자 1991년 시작한 프로젝트
	리눅스는 유닉스 기반의 운영체제로 오픈소스이며 누구나 사용할 수 있고 수정할 수 있는 자유 스포트웨어
	리눅스는 커널을 기반으로 하여 다양한 리눅스 배포판이 존재한다
	턱스(Tux) : 리눅스의 마스코드, 펭귄

	+) 리눅스 토르발즈, 리차드 스톨만
		- 리차드 스톨만
			소프트웨어는 모두에게 자유롭게 공유되어야 하며 소스코드 공개가 필수적
			GNU 프로젝트 창립, GPL 라이선스 제정

		- 리눅스 토르발즈
			실용적인 개발을 지향하며 자유 소프트웨어보다 오픈소스 모델을 더 선호함
			1991년 리눅스 커널 개발 시작
			1992년 리눅스 커널이 GNU 프로젝트와 결합하여 강력한 오픈소스 운영체제로 발전
			2005년 GIT 개발 -> 리눅스 커널 협업을 위해 만든 분산 버전 관리 시스템

6. 리눅스(Linux)
	유닉스(UNIX) 기반의 개인화된 소형 오픈소스 운영체제
	안드로이드 : 리눅스 커널을 사용한 운영체제
	리눅스 토르발즈가 1991년에 개발을 시작
	서버, 슈퍼컴퓨터, 클라우드, 스마트폰, IOT, 임베디드 시스템 등에서 광범위하게 사용된다

	1) 리눅스의 특징
		- 오픈소스 및 무료
		- 안정성 및 보안성
		- 커스터마이징 가능
		- 다양한 배포판

	2) 리눅스 시스템 구조
		- HW : 실제 물리적인 장치
		- Kernel(커널) : 운영체제의 핵심부분, 시스템 자원을 관리하고 하드웨어와 소프트웨어 간의 상호작용을 담당
		- Shell(쉘) : 사용자의 명령을 해석하고 커널에 전달하는 프로그램
				커맨드 라인 인터페이스(CLI), 그래픽 사용자 인터페이스(GUI)를 통해 시스템과 상호작용할 수 있다
		- 사용자 : 운영체제와 상호작용하는 사람

	3) 커널(Kernel)
		운영체제의 핵심부분, 하드웨어와 소프트웨어 간의 중재자 역할
		컴퓨터의 하드웨어 자원을 관리하고 사용자가 실행하는 프로그램이 하드웨어와 상호작용할 수 있도록 돕는 소프트웨어
		운영체제의 모든 중요한 작업을 담당하며 시스템의 안정성과 성능에 큰 영향을 미친다

		- 커널의 주요 역할
			하드웨어 관리
			프로세스 관리
			파일시스템 관리
			보안 및 접근 제어
			하드웨어 추상화

		- 커널의 종류
			모놀리식 커널(Monolithic kernel) : 모든 커널 기능이 하나의 큰 프로그램으로 구현된 커널
			마이크로 커널(MicrolKernel) : 커널의 핵심 기능만 최소화 하여 구현하고 나머지 기능은 커널 외부에서 실행되는 방식

		- 리눅스 커널
			리눅스 토르발즈가 처음 개발한 커널
			모놀리식 커널의 특성을 가지며 다양한 하드웨어와 소프트웨어를 지원한다
			오픈소스로 누구나 수정, 배포 가능
			디바이스 드라이버, 가상 메모리, 프로세스 스케줄링, 파일 시스템 등 여러 중요한 기능을 관리한다
			빠르고 안정적인 성능을 제공하며 서버, 개인용 컴퓨터, 모바일기기 등 다양한 환경에서 사용된다

	4) 쉘(Shell)
		사용자가 운영체제와 상호작용할 수 있도록 해주는 명령어 인터페이스
		사용자가 시스템에 명령을 내리고, 시스템이 그 명령을 실행하도록 커널에 전달하는 역할을 한다
		명령줄 인터페에스(CLI)를 제공하거나 그래픽 사용자 인터페이스(GUI)로도 구현될 수 있지만 대부분 리눅스 시스템에서는 CLI를 통해 명령어를 입력하고 작업을 처리하는 방식이 주로 사용된다

		- 쉘의 역할
			명령어 해석 : 사용자가 터미널에서 입력한 명령을 해석하고 실행하는 역할
			프로세스 관리 : 명령을 실행하면 쉘은 프로세스로 변환하여 실행하고 그 결과를 사용자에게 반환
			스크립트 실행 : 쉘 스크립트 파일을 실행할 수 있다
					여려 명령어를 순차적으로 실행하는 파일로 시스템 자동화에 유용하게 사용됨
			환경설정 : 사용자의 환경변수나 시스템 설정을 관리하고 이를 기반으로 프로그램을 실행

		- 쉘의 종류
			Bash(Bourne Again Shell)
				가장 인기 있는 쉘로 리눅스와 masOS에서 기본쉘로 많이 사용
				Bash는 Bourne Shell(sh)를 기반으로 개발되었으며 명령어 자동완성, 명령어 히스토리, 배치 스크립팅 기능이 강화

			Zsh(Z shell)
				Bash보다 더 많은 기능을 제공하를 쉘
				자동완성기능, 파일 탐색 기능이 발전되어 있다

			Csh(C shell)
				C언어 문법을 기반으로 한 쉘
				tcsh는 C쉘의 향상된 버전으로 탭 자동완성 등의 기능을 제공한다

			Fish(Friendly Interactive shell)
				사용자 친화적인 쉘
				자동완성 기능, 명령어 히스토링, 사용자 경험을 중시한다

		+) 리눅스 운영체제 구조
			사용자 응용 프로그램(ex : 웹 브라우저, 미디어 플레이어 등)
			↕
			쉘(Shell : 사용자와 커널을 연결하는 인터페이스)
			↕
			커널(Kernel : 운영체제의 핵심, 하드웨어와 직접 연결)
			↕
			하드웨어(HardWare : cpu, 메모리, 디스크, 네트워크 장치 등)

7. 리눅스 배포판
	1) 데스크톱/개인사용자용
		Ubuntu : 가장 인기있는 리눅스 배포판
		Linux Mint : 윈도우 사용자에게 친숙한 UI
		Fedora : 최신 기술을 빠르게 적용하는 배포판

	2) 서버 및 기업용
		CentOS/RHEL(Red Hat Enterprise Linux) : 기업용 서버에서 많이 사용됨
		Debian : 안정성과 보안성이 뛰어난 배포판
		SUSE Linux Enterprise Serverd(SLES) : 기업용으로 최적화된 배포판

	3) 해킹/보안 테스트용
		Kali linux : 해킹 및 보안 테스트(침투 테스트, 포렌식 분석)용
		Parrot OS : 프라이버시 보호와 보안 연구에 최적화

	4) 임베디드 및 IoT
		Raspberry pi OS : 라즈베리 파이 전용 리눅스
		Yocto Project : 맞춤형 임베디드 OS 제작 가능

8. Red Hat 계열 VS Debian 계열 VS 기타 계열
	리눅스 배포판은 커널을 기반으로 여러 패키지 관리시스템으로 환경을 추가하여 만들어진 운영체제

	1) Red Hat 계열(Red Hat-Based)
		RPM 패키지 시스템 사용(yum, dnf)
		기업 및 서버 환경에서 강력한 지원
		Red Hat이 주도하는 배포판
		Red Hat 유료지원(RHEL)
		배포판 : RHEL, CentOS, Fedora, Rocky Linux

	2) Debian 계열(Debian-Based)
		APT 패키지 시스템 사용(apt-get, apt)
		서버 뿐만 아니라 데스크톱 환경에서도 많이 사용됨
		커뮤니티 중심 지원
		배포판 : Ubuntu, Linux Mint

	3) Arch Linux 계열(Arch-Based)
		고급 사용자 및 개발자에게 적합한 배포판
		최소한의 기본 시스템만 제공 -> 사용자가 직접 커스터마이징
		Rolling Release 모델 -> 항상 최신 소프트웨어 제공
		배포판 : Arch Linux, Mangjaro, EndeavourOS

	4) Slackware 계열
		가장 오래된 리눅스 배포판 중 하나(1993년)
		단순하고 미니멀한 UNIX 스타일 운영체제
		패키지 관리시스템이 단순함(.tgz 패키지 사용, pkgtool 활용)
		배포판 : slackware, Salix OS, Porteus

	5) SUSE 계열(SUSE-Based)
		기업환경에서 많이 사용되는 또 다른 배포판 계열
		YaST 패키지 관리시스템 사용
		배포판 : openSUSE, SUSE Linux Enterprise(SLES)

9. 리눅스 스토리지와 디렉토리 구조
	스토리지(Storage) : 데이터를 저장하는 장치
	디렉토리 구조 : 리눅스 파일시스템에서 데이터가 저장되는 방식과 경로를 의미

	1) 스토리지(Storage)
		데이터를 저장하는 모든 장치를 의미

		- DAS(Direct Attached Storage) : 직접 연결된 스토리지
			서버 자체에 케이블로 외부 저장장치를 연결하는 방식
			가장 기본적인 저장방식으로 성능이 빠름
			단일 서버에서 연결되므로 확장성이 낮음
			ex) HDD, SSD, USB, 외장하드

		- NAS(Network Attached Storage) : 네트워크 연결 스토리지
			네트워크를 통해 연결된 저장소
			여러 사용자가 네트워크를 통해 접근 가능
			파일 서버 역할을 수행하며 파일 공유가 용이
			ex) 공유 폴더, 기업용 스토리지 서버, 클라우드 스토리지

		- SAN(Storage Area Network) : 스토리지 전용 네트워크
			DAS와 NAS의 단점을 보완한 시스템
			다양한 저장장치를 네트워크로 연결하여 공유
			일반 LAN이 아닌 스토리지 전용 네트워크 구성
			기업 및 데이터 센터에서 많이 사용
			ex) 대형 데이터베이스 서버, 가상화 환경의 중앙 저장소

		- Local(로컬 저장소)
			내부망에서 인터넷 없이 사용하는 내 컴퓨터 저장소
			자기사진의 컴퓨터 저장소를 의미

		- Domain(도메인)
			네트워크 상에서 특정 영역을 의미
			도메인 네트워크를 이용해 여러 시스템을 관리 가능

	2) 디렉토리 구조
		리눅스 파일 시스템은 디렉토리(Tree 구조)로 구성
		최상위 디렉토리는 / (루트, root)이며 모든 파일과 디렉토리는 여기서부터 시작된다


	★ 주요 디렉토리 및 역할
	디렉토리		역할 및 설명
	===================================================================
	/			최상위 디렉토리(root)									$C:

	/boot		부팅관련 파일 저장소(부트로더가 포함)						$boot.ini(부팅파일)

	/bin			기본 명령어 저장소(ls, cp, mv, rm 등)							$C:\windows\system32,

	/sbin		시스템 관리자 명령어 저장소(fdisk, reboot, shutdown 등)

	/home		일반 사용자의 홈 디렉토리 저장소							$C:\users, C\Users\Administrator

	/root		관리자(root) 전용 홈 디렉토리

	/etc			시스템 설정 파일 저장소(서버 관리, 네트워크 설정 등)

	/dev			장치 파일(Device) 저장소(usb, HDD, CD-ROM 등)
				TUI - 수동장치연결(mount), GUI - 자동장치연결(PnP, plug&play)

	/media		자동 장치 연결 위치(usb, CD-ROM 등)						키보드, 마우스, HDD, CD-ROM

	/mnt			원격 장치(네트워크 드라이브) 연결 위치						에어팟/버즈, 블루투스, WIFI

	/usr			응용 프로그램 저장소(일반 소프트웨어)

	/proc		현재 실행중인 프로세스 정보 저장소(휘발성 데이터)
				kenel, 가상화, 프로그램 동작중인 모든 프로그램

	/var			자주 변경된느 파일 저장소(로그파일, 메일, 상태 메시지 등)

	/lib			공유 라이브러리 저장소(.so 파일, c라이브러리 등)

	/tmp			임시 파일 저장소

	swap			가상 메모리(RAM 부족 시 사용되는 공간)


	3) 리눅스 디렉토리
		/		루트, root 최상위 디렉토리
				리눅스 파일 시스템의 시작점
				모든 파일과 디렉토리는 / 아래 위치

		/boot	부팅 관련 파일 저장소
				부트로더(LILO, GRUB) 및 커널 이미지 저장
				GRUB : 최신 리눅스에서 사용
				LILO : 예전 리눅스에서 사용

		/bin		기본 명령어 저장소
				모든 사용자가 실행할 수 있는 기본 명령어 (binary 파일) 저장

				ex) ls, cp, mv, rm, cat, echo, grep, chmod, find

		/sbin	기본 명령어 저장소
				시스템 관리자(root)만 사용할 수 있는 명령어 저장소

				ex) fdisk, ifconfig 


		/home	사용자 홈 디렉토리 저장소
				일반 사용자들의 홈 디렉토리

				ex) /home/test1, /home/user1

		/root	관리자 홈 디렉토리
				루트(root)계정의 홈 디렉토리
				(/home 구분됨)

		/etc		설정파일 저장소
				시스템 설정 및 서버 관리 파일 저장소

				/etc/passwd	#사용자 계정 정보
				/etc/shadow	#사용자 암호 정보
				/etc/hosts	#호스트 네일 설정

		/dev		장치 파일 저장소
				키보드, 마우스, 하드디스크 등의 장치를 파일처럼 관리

				/dev/sda1	#하드디스크 첫 번째 파티션
				/dev/cdrom	#CD-ROM 장치

		/media	자동 장치 연결 위치
				USB, CO-ROM 같은 장치가 자동으로 마운트됨

		/mnt		원격 장치 연결위치
				네트워크 드라이브 같은 원격 장치를 마운트 할 때 사용

		/usr		응용프로그램 저장소
				시스템과 관련된 응용프로그램 설치

				ex) /usr/bin	#일반 프로그램 실행파일 저장소
				/usr/sbin		#시스템관리자 명령어 저장소

		/proc	현재 실행중인 프로세스 정보 저장
				휘발성 데이터 저장(재부팅 시 삭제됨)

				ex) /proc/cpuinfo	#cpu 정보
				/proc/meminfoo	#메모리 사용량

		/var		자주 변경되는 파일 저장소
				비휘발성 데이터 저장(재부팅 후에도 유지)
				ex) /var/log	#시스템 로그파일 저장소
				/var/mail		#사용자 메일 저장소

		/tmp		임시 파일 저장소
				프로그램 실행 중 생성되는 임시파일 저장
				기본적으로 1000개 이상의 임시 파일 저장 가능
				재부팅하면 자동 삭제됨

10.  VM WARE 설치
	https://www.briadcom.com/ 가입(구글 계정으로 가입)

	가입 완료 후 로그인 > 메인 페이지의 software 클릭 > VMWare Cloud Foundation > My Downloads > 2페이지 > VMWare Workstation Pro > 17.6.2 다운로드

	1) 다운로드 완료 후 vmware 설치 진행
		next
		I accept the terms int the License Agrement 체크 후 Next
		vmware 설치 경로 이동 > D:\secure\itbasic\resource 변경 후 Next
		User Experiece Setting 옵션 모두 체크 헤제
			- Check for product updates on startup : VMWare Workstation Pro가 업데이트 되면 자동으로 알려주는 기능
			- Join the VMware Customer Experience Improvement Program : 편의성 개선을 의해 사용과 관련된 정보 익명으로 보내는 기능
		Desktop, Start Menu Programs Folder 둘 다 체크 후 Next
		Install > finish

		설치 완료 후 설치 폴더에서 vmware.exe 파일 확인

	2) 가상머신에 록키리눅스 설치 하기 위한 준비
		Create a New Virtual Machine 클릭

		> Typical(권장), Custom(고급)
			Typical : 가상 머신을 기본 설정으로 쉽게 만들 수 있게 도와주는 옵션
				vmware가 하드웨어 호환성, 가상 디스크 형식 등 대부분의 설정을 자동으로 선택해줌
			Custom : 가상머신의 설정을 세밀하게 조정할 수 있는 고급 옵션
				SCSI컨트롤러 유형, 가상 디스크 형식, vmware 구버전 호환성 등 여러 고급 설정을 직접 선택하고 조정 가능함

		> Workstation 17.x
			가상 머신이 사용할 하드웨어의 호환성 설정 선택

		> I will install the operating systm later. (나중에 iso 파일을 넣겠다)

		> Linux / Other Linux 4.x kernel 64 bit
			가상머신에 설치할 운영체제의 종류 선택

		> 가상머신을 관리하기 쉽도록 이름 지정 RockyLinux_8
			가상 머신 파일을 저장할 폴더 선택

		> 1 1(기본값)
			가상머신에서 할당할 프로세서 수와 코어 수 설정(cpu 자원을 설정하는 단게)

		> 4G => 4096
				가상머신에 할당할 메모리 용량 설정

		> NAT
			네트워크 연결 유형을 선택
			Use bridged networking : 브리지 연결을 사용하면 가상머신이 호스트 컴퓨터와 동일한 네트워크에 연결된다
				가상머신은 물리적인 컴퓨터처럼 외부 네트워크 직접 연결되며 고유한 IP주소를 할당받는다
				가상머신이 독립적으로 외부 네트워크에 연결되어야 할 때 사용된다
			Use network address translation(NAT) : NAT(네트워크 주소 변환)를 사용하게 되면 가상 머신이 호스트 컴퓨터의 IP주소를 공유하여 외부 네트워크에 접속할 수 있다
				가상머신이 외부 네트워크와 통신할 수 있도록 하되 가상머신이 외부에서 직접 접근되는 것을 방지한다
			Use host-only networking : 호스트 전용 네트워크를 사용하면 가상머신과 호스트 컴퓨터만 서로 통신할 수 있고 외부 네트워크는 연결되지 않는다
			Do not user a network connection : 가상머신이 네트워크와 연결되지 않는다

		> LSI Logic SAS
			SCSI Controller 유형 선택
			BusLogic : 구버전 VMware와 호환되며, 64비트 시스템에서는 사용 불가
			LSI Logic SAS : VMware에서 기본적으로 권장하는 설정으로 대부분의 최신 운영체제 적합
			LSI Logic SAS : 고속 데이터 전송을 지원하는 고급 SCSI 컨트롤러, 고성능이 필요한 환경에 적합
			Paravirtualized SCSI : 성능을 극대화 할 수 있도록 최적화된 고성능 가상 SCSI 컨트롤러

		> SCSI(기본값)
			가상머신에 사용할 디스크 유형 선택
			IDE : 구형 하드 드라이브 인터페이스로 속도가 느리며 최신 시스템에서는 거의 사용되지 않는다
			SCSI(추쳔) : 고성능과 안정성을 제공하며 vm ware 환경에서 권장되는 선택
			SATA : 현대적인 하드 드라이브와 SSD에서 사용되는 인터페이스로 일반적인 성능에 적합
			NVMe : 최신 SSD 성능을 최대한 활용할 수 있는 빠른 인터페이스

		> Create a new Virtual disk
			가상머신에 사용할 디스크 유형 선택
			새로운 가상 디스크를 생성하여 가상머신에 할당
			Use an existing virtual disk : 이미 존재하는 가상 디스크를 재사용
			Use a physical disk : 물리적인 하드 드라이브를 가상머신에서 직접 사용(고급사용자용)

		> 100, 첫 번째 라디오버튼 클릭
			디스크의 크기와 저장 방식을 설정
			Store virtual disk as a single file : 가상 디스크를 하나의 파일로 저장하여 관리함

		> 설치한 경로로 지정
			specify disk file 가상머신의 가상 디스크 파일이 저장될 위치와 파일 이름을 설정

		> 최종 설정 정보 확인 > Finish